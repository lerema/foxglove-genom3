/*
 * Copyright (c) 2023 LAAS/CNRS
 *
 * Author: Selvakumar H S - LAAS/CNRS
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma require "felix-idl"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"
#include "or/pose/pose_estimator.gen"

/* -------------------------- MODULE DECLARATION --------------------------- */
component FoxgloveStudio {
  version "1.0";
  email	  "shasthamsa@laas.fr";
  lang	  "c";
  require "genom3 >= 2.99.26";
  doc 	  "A GenoM module for foxglove studio integration.";

  codels-require "opencv4, felix-g3utils, vision-idl, flatbuffers, openssl, zlib";

  exception e_BAD_PORT { short code; string<128> message; };
  exception e_OPENCV_ERROR { short code; string<128> message; };
  exception e_OUT_OF_MEM { short code; string<128> message; };
  exception e_BAD_CONFIG { short code; string<128> message; };

  enum PortType {
    or_sensor_frame,
    or_sensor_imu,
    or_sensor_magnetometer,
    or_pose_estimator_state
  };

  struct Port {
    string<128> name;
    PortType type;
  };

  /* -------------------------- IDS --------------------------- */
  ids {
    sequence<Port> ports;

    boolean start_foxglove_server;
    string server_ip;
    unsigned short server_port;
    boolean debug;
    octet verbose_level;
  };

  /* ------------- DEFINITION OF PORTS -------------- */
  // Camera
  port multiple in or::sensor::frame frames {
    doc "The image frame port.";
  };

  // Sensor
  port multiple in or_pose_estimator::state measure {
    doc "The sensor measurements.";
  };

  // State
  port multiple in or_pose_estimator::state states {
    doc "The pose estimation states.";
  };

  /* ------------------ TASK DEFINITION -------------------- */
  task main {
    doc "Publish to foxglove studio.";

    codel<start> wait_for_ports(ids in ports, ids in start_foxglove_server, in frames, in measure, in states)
        yield server, pause::start;
    codel<server> setup_server_configuration(ids in server_ip, ids in server_port)
        yield setup;
    codel<setup> setup_port_serialization(ids in ports)
        yield publish, start;
    codel<publish> publish_data(ids in ports, in frames, in measure, in states)
        yield publish, pause::start;

    throw e_BAD_CONFIG, e_BAD_PORT, e_OPENCV_ERROR, e_OUT_OF_MEM;
  };

  /* ------------------ ACTIVITY DEFINITION --------------------- */
  activity add_port(in string<128> port_name =: "Genom port name", in PortType port_type =: "Genom port type") {
    doc "Add a port to the list of ports to be published.";
    task main;

    codel<start> setup_port_info(in port_name, in port_type, ids out ports, in frames)
        yield ether;

    throws e_BAD_PORT, e_OUT_OF_MEM;
  };

  /* ------------------ SERVICE DEFINITION: Attributes -------------------- */
  attribute set_debug(in debug = FALSE : "Enable debug (default: false)" ) {
    doc "Set the debug mode.";
  };

  attribute set_verbose_level(in verbose_level = 0 : "Verbose level") {
    doc "Set the verbose level.";
  };

  attribute setup_server(in server_ip ="0.0.0.0" : "Websocket server ip",
                            in server_port = 8765 : "Websocket server port") {
    doc "Setup the websocket connection.";
  };

  /* ------------------ SERVICE DEFINITION: Functions -------------------- */
  function start_foxglove_server()
  {
    doc "Start the foxglove server.";
    validate check_info(in ::ids);

    codel start_server(ids out start_foxglove_server);
    throws e_BAD_CONFIG, e_BAD_PORT, e_OPENCV_ERROR, e_OUT_OF_MEM;
  };

  function stop_foxglove_server()
  {
    doc "Stop the foxglove server.";
    validate check_info(in ::ids);

    codel stop_server(ids out start_foxglove_server);
    throws e_BAD_CONFIG, e_BAD_PORT, e_OPENCV_ERROR, e_OUT_OF_MEM;
  };
};