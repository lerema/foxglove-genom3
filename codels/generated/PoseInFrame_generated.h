// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSEINFRAME_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_POSEINFRAME_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

#include "Pose_generated.h"
#include "Quaternion_generated.h"
#include "Time_generated.h"
#include "Vector3_generated.h"

namespace foxglove {

struct PoseInFrame;

/// A timestamped pose for an object or reference frame in 3D space
struct PoseInFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_POSE = 8
  };
  /// Timestamp of pose
  const Time *timestamp() const {
    return GetStruct<const Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference for pose position and orientation
  const flatbuffers::String *frame_id() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Pose in 3D space
  const Pose *pose() const {
    return GetPointer<const Pose *>(VT_POSE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Time>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           verifier.EndTable();
  }
};

struct PoseInFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(const Time *timestamp) {
    fbb_.AddStruct(PoseInFrame::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(flatbuffers::Offset<flatbuffers::String> frame_id) {
    fbb_.AddOffset(PoseInFrame::VT_FRAME_ID, frame_id);
  }
  void add_pose(flatbuffers::Offset<Pose> pose) {
    fbb_.AddOffset(PoseInFrame::VT_POSE, pose);
  }
  explicit PoseInFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PoseInFrameBuilder &operator=(const PoseInFrameBuilder &);
  flatbuffers::Offset<PoseInFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PoseInFrame>(end);
    return o;
  }
};

inline flatbuffers::Offset<PoseInFrame> CreatePoseInFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> frame_id = 0,
    flatbuffers::Offset<Pose> pose = 0) {
  PoseInFrameBuilder builder_(_fbb);
  builder_.add_pose(pose);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline flatbuffers::Offset<PoseInFrame> CreatePoseInFrameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    const char *frame_id = nullptr,
    flatbuffers::Offset<Pose> pose = 0) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  return foxglove::CreatePoseInFrame(
      _fbb,
      timestamp,
      frame_id__,
      pose);
}

inline const foxglove::PoseInFrame *GetPoseInFrame(const void *buf) {
  return flatbuffers::GetRoot<foxglove::PoseInFrame>(buf);
}

inline const foxglove::PoseInFrame *GetSizePrefixedPoseInFrame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<foxglove::PoseInFrame>(buf);
}

inline bool VerifyPoseInFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::PoseInFrame>(nullptr);
}

inline bool VerifySizePrefixedPoseInFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::PoseInFrame>(nullptr);
}

inline void FinishPoseInFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::PoseInFrame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPoseInFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::PoseInFrame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_POSEINFRAME_FOXGLOVE_H_
