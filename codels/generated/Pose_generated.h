// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSE_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_POSE_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

#include "Quaternion_generated.h"
#include "Vector3_generated.h"

namespace foxglove {

struct Pose;

/// A position and orientation for an object or reference frame in 3D space
struct Pose FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ORIENTATION = 6
  };
  /// Point denoting position in 3D space
  const Vector3 *position() const {
    return GetPointer<const Vector3 *>(VT_POSITION);
  }
  /// Quaternion denoting orientation in 3D space
  const Quaternion *orientation() const {
    return GetPointer<const Quaternion *>(VT_ORIENTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_ORIENTATION) &&
           verifier.VerifyTable(orientation()) &&
           verifier.EndTable();
  }
};

struct PoseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(flatbuffers::Offset<Vector3> position) {
    fbb_.AddOffset(Pose::VT_POSITION, position);
  }
  void add_orientation(flatbuffers::Offset<Quaternion> orientation) {
    fbb_.AddOffset(Pose::VT_ORIENTATION, orientation);
  }
  explicit PoseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PoseBuilder &operator=(const PoseBuilder &);
  flatbuffers::Offset<Pose> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Pose>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pose> CreatePose(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Vector3> position = 0,
    flatbuffers::Offset<Quaternion> orientation = 0) {
  PoseBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const foxglove::Pose *GetPose(const void *buf) {
  return flatbuffers::GetRoot<foxglove::Pose>(buf);
}

inline const foxglove::Pose *GetSizePrefixedPose(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<foxglove::Pose>(buf);
}

inline bool VerifyPoseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::Pose>(nullptr);
}

inline bool VerifySizePrefixedPoseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::Pose>(nullptr);
}

inline void FinishPoseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::Pose> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPoseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::Pose> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_POSE_FOXGLOVE_H_
