// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LASERSCAN_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_LASERSCAN_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

#include "Pose_generated.h"
#include "Quaternion_generated.h"
#include "Time_generated.h"
#include "Vector3_generated.h"

namespace foxglove {

struct LaserScan;

/// A single scan from a planar laser range-finder
struct LaserScan FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_POSE = 8,
    VT_START_ANGLE = 10,
    VT_END_ANGLE = 12,
    VT_RANGES = 14,
    VT_INTENSITIES = 16
  };
  /// Timestamp of scan
  const Time *timestamp() const {
    return GetStruct<const Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference
  const flatbuffers::String *frame_id() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Origin of scan relative to frame of reference; points are positioned in the x-y plane relative to this origin; angles are interpreted as counterclockwise rotations around the z axis with 0 rad being in the +x direction
  const Pose *pose() const {
    return GetPointer<const Pose *>(VT_POSE);
  }
  /// Bearing of first point, in radians
  double start_angle() const {
    return GetField<double>(VT_START_ANGLE, 0.0);
  }
  /// Bearing of last point, in radians
  double end_angle() const {
    return GetField<double>(VT_END_ANGLE, 0.0);
  }
  /// Distance of detections from origin; assumed to be at equally-spaced angles between `start_angle` and `end_angle`
  const flatbuffers::Vector<double> *ranges() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_RANGES);
  }
  /// Intensity of detections
  const flatbuffers::Vector<double> *intensities() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_INTENSITIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Time>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<double>(verifier, VT_START_ANGLE) &&
           VerifyField<double>(verifier, VT_END_ANGLE) &&
           VerifyOffset(verifier, VT_RANGES) &&
           verifier.VerifyVector(ranges()) &&
           VerifyOffset(verifier, VT_INTENSITIES) &&
           verifier.VerifyVector(intensities()) &&
           verifier.EndTable();
  }
};

struct LaserScanBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(const Time *timestamp) {
    fbb_.AddStruct(LaserScan::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(flatbuffers::Offset<flatbuffers::String> frame_id) {
    fbb_.AddOffset(LaserScan::VT_FRAME_ID, frame_id);
  }
  void add_pose(flatbuffers::Offset<Pose> pose) {
    fbb_.AddOffset(LaserScan::VT_POSE, pose);
  }
  void add_start_angle(double start_angle) {
    fbb_.AddElement<double>(LaserScan::VT_START_ANGLE, start_angle, 0.0);
  }
  void add_end_angle(double end_angle) {
    fbb_.AddElement<double>(LaserScan::VT_END_ANGLE, end_angle, 0.0);
  }
  void add_ranges(flatbuffers::Offset<flatbuffers::Vector<double>> ranges) {
    fbb_.AddOffset(LaserScan::VT_RANGES, ranges);
  }
  void add_intensities(flatbuffers::Offset<flatbuffers::Vector<double>> intensities) {
    fbb_.AddOffset(LaserScan::VT_INTENSITIES, intensities);
  }
  explicit LaserScanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LaserScanBuilder &operator=(const LaserScanBuilder &);
  flatbuffers::Offset<LaserScan> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LaserScan>(end);
    return o;
  }
};

inline flatbuffers::Offset<LaserScan> CreateLaserScan(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> frame_id = 0,
    flatbuffers::Offset<Pose> pose = 0,
    double start_angle = 0.0,
    double end_angle = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<double>> ranges = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> intensities = 0) {
  LaserScanBuilder builder_(_fbb);
  builder_.add_end_angle(end_angle);
  builder_.add_start_angle(start_angle);
  builder_.add_intensities(intensities);
  builder_.add_ranges(ranges);
  builder_.add_pose(pose);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline flatbuffers::Offset<LaserScan> CreateLaserScanDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    const char *frame_id = nullptr,
    flatbuffers::Offset<Pose> pose = 0,
    double start_angle = 0.0,
    double end_angle = 0.0,
    const std::vector<double> *ranges = nullptr,
    const std::vector<double> *intensities = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto ranges__ = ranges ? _fbb.CreateVector<double>(*ranges) : 0;
  auto intensities__ = intensities ? _fbb.CreateVector<double>(*intensities) : 0;
  return foxglove::CreateLaserScan(
      _fbb,
      timestamp,
      frame_id__,
      pose,
      start_angle,
      end_angle,
      ranges__,
      intensities__);
}

inline const foxglove::LaserScan *GetLaserScan(const void *buf) {
  return flatbuffers::GetRoot<foxglove::LaserScan>(buf);
}

inline const foxglove::LaserScan *GetSizePrefixedLaserScan(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<foxglove::LaserScan>(buf);
}

inline bool VerifyLaserScanBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::LaserScan>(nullptr);
}

inline bool VerifySizePrefixedLaserScanBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::LaserScan>(nullptr);
}

inline void FinishLaserScanBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::LaserScan> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLaserScanBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::LaserScan> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_LASERSCAN_FOXGLOVE_H_
