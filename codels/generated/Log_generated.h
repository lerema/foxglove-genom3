// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOG_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_LOG_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

#include "Time_generated.h"

namespace foxglove {

struct Log;

/// Log level
enum LogLevel {
  LogLevel_UNKNOWN = 0,
  LogLevel_DEBUG = 1,
  LogLevel_INFO = 2,
  LogLevel_WARNING = 3,
  LogLevel_ERROR = 4,
  LogLevel_FATAL = 5,
  LogLevel_MIN = LogLevel_UNKNOWN,
  LogLevel_MAX = LogLevel_FATAL
};

inline const LogLevel (&EnumValuesLogLevel())[6] {
  static const LogLevel values[] = {
    LogLevel_UNKNOWN,
    LogLevel_DEBUG,
    LogLevel_INFO,
    LogLevel_WARNING,
    LogLevel_ERROR,
    LogLevel_FATAL
  };
  return values;
}

inline const char * const *EnumNamesLogLevel() {
  static const char * const names[] = {
    "UNKNOWN",
    "DEBUG",
    "INFO",
    "WARNING",
    "ERROR",
    "FATAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameLogLevel(LogLevel e) {
  if (e < LogLevel_UNKNOWN || e > LogLevel_FATAL) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLogLevel()[index];
}

/// A log message
struct Log FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_LEVEL = 6,
    VT_MESSAGE = 8,
    VT_NAME = 10,
    VT_FILE = 12,
    VT_LINE = 14
  };
  /// Timestamp of log message
  const Time *timestamp() const {
    return GetStruct<const Time *>(VT_TIMESTAMP);
  }
  /// Log level
  LogLevel level() const {
    return static_cast<LogLevel>(GetField<uint8_t>(VT_LEVEL, 0));
  }
  /// Log message
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  /// Process or node name
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  /// Filename
  const flatbuffers::String *file() const {
    return GetPointer<const flatbuffers::String *>(VT_FILE);
  }
  /// Line number in the file
  uint32_t line() const {
    return GetField<uint32_t>(VT_LINE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Time>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FILE) &&
           verifier.VerifyString(file()) &&
           VerifyField<uint32_t>(verifier, VT_LINE) &&
           verifier.EndTable();
  }
};

struct LogBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(const Time *timestamp) {
    fbb_.AddStruct(Log::VT_TIMESTAMP, timestamp);
  }
  void add_level(LogLevel level) {
    fbb_.AddElement<uint8_t>(Log::VT_LEVEL, static_cast<uint8_t>(level), 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Log::VT_MESSAGE, message);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Log::VT_NAME, name);
  }
  void add_file(flatbuffers::Offset<flatbuffers::String> file) {
    fbb_.AddOffset(Log::VT_FILE, file);
  }
  void add_line(uint32_t line) {
    fbb_.AddElement<uint32_t>(Log::VT_LINE, line, 0);
  }
  explicit LogBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogBuilder &operator=(const LogBuilder &);
  flatbuffers::Offset<Log> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Log>(end);
    return o;
  }
};

inline flatbuffers::Offset<Log> CreateLog(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    LogLevel level = LogLevel_UNKNOWN,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> file = 0,
    uint32_t line = 0) {
  LogBuilder builder_(_fbb);
  builder_.add_line(line);
  builder_.add_file(file);
  builder_.add_name(name);
  builder_.add_message(message);
  builder_.add_timestamp(timestamp);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<Log> CreateLogDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    LogLevel level = LogLevel_UNKNOWN,
    const char *message = nullptr,
    const char *name = nullptr,
    const char *file = nullptr,
    uint32_t line = 0) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto file__ = file ? _fbb.CreateString(file) : 0;
  return foxglove::CreateLog(
      _fbb,
      timestamp,
      level,
      message__,
      name__,
      file__,
      line);
}

inline const foxglove::Log *GetLog(const void *buf) {
  return flatbuffers::GetRoot<foxglove::Log>(buf);
}

inline const foxglove::Log *GetSizePrefixedLog(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<foxglove::Log>(buf);
}

inline bool VerifyLogBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::Log>(nullptr);
}

inline bool VerifySizePrefixedLogBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::Log>(nullptr);
}

inline void FinishLogBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::Log> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLogBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::Log> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_LOG_FOXGLOVE_H_
