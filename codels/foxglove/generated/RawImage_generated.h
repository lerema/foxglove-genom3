// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RAWIMAGE_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_RAWIMAGE_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

#include "Time_generated.h"

namespace foxglove {

struct RawImage;

/// A raw image
struct RawImage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_WIDTH = 8,
    VT_HEIGHT = 10,
    VT_ENCODING = 12,
    VT_STEP = 14,
    VT_DATA = 16
  };
  /// Timestamp of image
  const Time *timestamp() const {
    return GetStruct<const Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image.
  const flatbuffers::String *frame_id() const {
    return GetPointer<const flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Image width
  uint32_t width() const {
    return GetField<uint32_t>(VT_WIDTH, 0);
  }
  /// Image height
  uint32_t height() const {
    return GetField<uint32_t>(VT_HEIGHT, 0);
  }
  /// Encoding of the raw image data
  /// 
  /// Supported values: `8UC1`, `8UC3`, `16UC1`, `32FC1`, `bayer_bggr8`, `bayer_gbrg8`, `bayer_grbg8`, `bayer_rggb8`, `bgr8`, `bgra8`, `mono8`, `mono16`, `rgb8`, `rgba8`, `yuv422`
  const flatbuffers::String *encoding() const {
    return GetPointer<const flatbuffers::String *>(VT_ENCODING);
  }
  /// Byte length of a single row
  uint32_t step() const {
    return GetField<uint32_t>(VT_STEP, 0);
  }
  /// Raw image data
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Time>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyField<uint32_t>(verifier, VT_WIDTH) &&
           VerifyField<uint32_t>(verifier, VT_HEIGHT) &&
           VerifyOffset(verifier, VT_ENCODING) &&
           verifier.VerifyString(encoding()) &&
           VerifyField<uint32_t>(verifier, VT_STEP) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct RawImageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(const Time *timestamp) {
    fbb_.AddStruct(RawImage::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(flatbuffers::Offset<flatbuffers::String> frame_id) {
    fbb_.AddOffset(RawImage::VT_FRAME_ID, frame_id);
  }
  void add_width(uint32_t width) {
    fbb_.AddElement<uint32_t>(RawImage::VT_WIDTH, width, 0);
  }
  void add_height(uint32_t height) {
    fbb_.AddElement<uint32_t>(RawImage::VT_HEIGHT, height, 0);
  }
  void add_encoding(flatbuffers::Offset<flatbuffers::String> encoding) {
    fbb_.AddOffset(RawImage::VT_ENCODING, encoding);
  }
  void add_step(uint32_t step) {
    fbb_.AddElement<uint32_t>(RawImage::VT_STEP, step, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(RawImage::VT_DATA, data);
  }
  explicit RawImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RawImageBuilder &operator=(const RawImageBuilder &);
  flatbuffers::Offset<RawImage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RawImage>(end);
    return o;
  }
};

inline flatbuffers::Offset<RawImage> CreateRawImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> frame_id = 0,
    uint32_t width = 0,
    uint32_t height = 0,
    flatbuffers::Offset<flatbuffers::String> encoding = 0,
    uint32_t step = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  RawImageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_step(step);
  builder_.add_encoding(encoding);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline flatbuffers::Offset<RawImage> CreateRawImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Time *timestamp = 0,
    const char *frame_id = nullptr,
    uint32_t width = 0,
    uint32_t height = 0,
    const char *encoding = nullptr,
    uint32_t step = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto encoding__ = encoding ? _fbb.CreateString(encoding) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return foxglove::CreateRawImage(
      _fbb,
      timestamp,
      frame_id__,
      width,
      height,
      encoding__,
      step,
      data__);
}

inline const foxglove::RawImage *GetRawImage(const void *buf) {
  return flatbuffers::GetRoot<foxglove::RawImage>(buf);
}

inline const foxglove::RawImage *GetSizePrefixedRawImage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<foxglove::RawImage>(buf);
}

inline bool VerifyRawImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::RawImage>(nullptr);
}

inline bool VerifySizePrefixedRawImageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::RawImage>(nullptr);
}

inline void FinishRawImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::RawImage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRawImageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::RawImage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_RAWIMAGE_FOXGLOVE_H_
