// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENEENTITY_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_SCENEENTITY_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

namespace foxglove {

struct Color;
struct ColorBuilder;

struct Quaternion;
struct QuaternionBuilder;

struct Vector3;
struct Vector3Builder;

struct Pose;
struct PoseBuilder;

struct ArrowPrimitive;
struct ArrowPrimitiveBuilder;

struct CubePrimitive;
struct CubePrimitiveBuilder;

struct CylinderPrimitive;
struct CylinderPrimitiveBuilder;

struct Duration;

struct KeyValuePair;
struct KeyValuePairBuilder;

struct Point3;
struct Point3Builder;

struct LinePrimitive;
struct LinePrimitiveBuilder;

struct ModelPrimitive;
struct ModelPrimitiveBuilder;

struct SpherePrimitive;
struct SpherePrimitiveBuilder;

struct TextPrimitive;
struct TextPrimitiveBuilder;

struct Time;

struct TriangleListPrimitive;
struct TriangleListPrimitiveBuilder;

struct SceneEntity;
struct SceneEntityBuilder;

inline const ::flatbuffers::TypeTable *ColorTypeTable();

inline const ::flatbuffers::TypeTable *QuaternionTypeTable();

inline const ::flatbuffers::TypeTable *Vector3TypeTable();

inline const ::flatbuffers::TypeTable *PoseTypeTable();

inline const ::flatbuffers::TypeTable *ArrowPrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *CubePrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *CylinderPrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *DurationTypeTable();

inline const ::flatbuffers::TypeTable *KeyValuePairTypeTable();

inline const ::flatbuffers::TypeTable *Point3TypeTable();

inline const ::flatbuffers::TypeTable *LinePrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *ModelPrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *SpherePrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *TextPrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *TimeTypeTable();

inline const ::flatbuffers::TypeTable *TriangleListPrimitiveTypeTable();

inline const ::flatbuffers::TypeTable *SceneEntityTypeTable();

/// An enumeration indicating how input points should be interpreted to create lines
enum LineType : uint8_t {
  /// Connected line segments: 0-1, 1-2, ..., (n-1)-n
  LineType_LINE_STRIP = 0,
  /// Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0
  LineType_LINE_LOOP = 1,
  /// Individual line segments: 0-1, 2-3, 4-5, ...
  LineType_LINE_LIST = 2,
  LineType_MIN = LineType_LINE_STRIP,
  LineType_MAX = LineType_LINE_LIST
};

inline const LineType (&EnumValuesLineType())[3] {
  static const LineType values[] = {
    LineType_LINE_STRIP,
    LineType_LINE_LOOP,
    LineType_LINE_LIST
  };
  return values;
}

inline const char * const *EnumNamesLineType() {
  static const char * const names[4] = {
    "LINE_STRIP",
    "LINE_LOOP",
    "LINE_LIST",
    nullptr
  };
  return names;
}

inline const char *EnumNameLineType(LineType e) {
  if (::flatbuffers::IsOutRange(e, LineType_LINE_STRIP, LineType_LINE_LIST)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLineType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Duration FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t sec_;
  int32_t nsec_;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DurationTypeTable();
  }
  Duration()
      : sec_(0),
        nsec_(0) {
  }
  Duration(int32_t _sec, int32_t _nsec)
      : sec_(::flatbuffers::EndianScalar(_sec)),
        nsec_(::flatbuffers::EndianScalar(_nsec)) {
  }
  /// Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive.
  int32_t sec() const {
    return ::flatbuffers::EndianScalar(sec_);
  }
  /// if sec === 0 : -999,999,999 <= nsec <= +999,999,999 
  /// otherwise sign of sec must match sign of nsec or be 0 and abs(nsec) <= 999,999,999
  int32_t nsec() const {
    return ::flatbuffers::EndianScalar(nsec_);
  }
};
FLATBUFFERS_STRUCT_END(Duration, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Time FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t sec_;
  uint32_t nsec_;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TimeTypeTable();
  }
  Time()
      : sec_(0),
        nsec_(0) {
  }
  Time(uint32_t _sec, uint32_t _nsec)
      : sec_(::flatbuffers::EndianScalar(_sec)),
        nsec_(::flatbuffers::EndianScalar(_nsec)) {
  }
  /// Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z
  uint32_t sec() const {
    return ::flatbuffers::EndianScalar(sec_);
  }
  /// Nano-second fractions from 0 to 999,999,999 inclusive
  uint32_t nsec() const {
    return ::flatbuffers::EndianScalar(nsec_);
  }
};
FLATBUFFERS_STRUCT_END(Time, 8);

/// A color in RGBA format
struct Color FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ColorBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ColorTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_R = 4,
    VT_G = 6,
    VT_B = 8,
    VT_A = 10
  };
  /// Red value between 0 and 1
  double r() const {
    return GetField<double>(VT_R, 1.0);
  }
  /// Green value between 0 and 1
  double g() const {
    return GetField<double>(VT_G, 1.0);
  }
  /// Blue value between 0 and 1
  double b() const {
    return GetField<double>(VT_B, 1.0);
  }
  /// Alpha value between 0 and 1
  double a() const {
    return GetField<double>(VT_A, 1.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_R, 8) &&
           VerifyField<double>(verifier, VT_G, 8) &&
           VerifyField<double>(verifier, VT_B, 8) &&
           VerifyField<double>(verifier, VT_A, 8) &&
           verifier.EndTable();
  }
};

struct ColorBuilder {
  typedef Color Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_r(double r) {
    fbb_.AddElement<double>(Color::VT_R, r, 1.0);
  }
  void add_g(double g) {
    fbb_.AddElement<double>(Color::VT_G, g, 1.0);
  }
  void add_b(double b) {
    fbb_.AddElement<double>(Color::VT_B, b, 1.0);
  }
  void add_a(double a) {
    fbb_.AddElement<double>(Color::VT_A, a, 1.0);
  }
  explicit ColorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Color> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Color>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Color> CreateColor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double r = 1.0,
    double g = 1.0,
    double b = 1.0,
    double a = 1.0) {
  ColorBuilder builder_(_fbb);
  builder_.add_a(a);
  builder_.add_b(b);
  builder_.add_g(g);
  builder_.add_r(r);
  return builder_.Finish();
}

/// A [quaternion](https://eater.net/quaternions) representing a rotation in 3D space
struct Quaternion FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef QuaternionBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return QuaternionTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_W = 10
  };
  /// x value
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  /// y value
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  /// z value
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  /// w value
  double w() const {
    return GetField<double>(VT_W, 1.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           VerifyField<double>(verifier, VT_W, 8) &&
           verifier.EndTable();
  }
};

struct QuaternionBuilder {
  typedef Quaternion Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(Quaternion::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(Quaternion::VT_Y, y, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(Quaternion::VT_Z, z, 0.0);
  }
  void add_w(double w) {
    fbb_.AddElement<double>(Quaternion::VT_W, w, 1.0);
  }
  explicit QuaternionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Quaternion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Quaternion>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Quaternion> CreateQuaternion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0,
    double w = 1.0) {
  QuaternionBuilder builder_(_fbb);
  builder_.add_w(w);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

/// A vector in 3D space that represents a direction only
struct Vector3 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vector3Builder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Vector3TypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  /// x coordinate length
  double x() const {
    return GetField<double>(VT_X, 1.0);
  }
  /// y coordinate length
  double y() const {
    return GetField<double>(VT_Y, 1.0);
  }
  /// z coordinate length
  double z() const {
    return GetField<double>(VT_Z, 1.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           verifier.EndTable();
  }
};

struct Vector3Builder {
  typedef Vector3 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(Vector3::VT_X, x, 1.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(Vector3::VT_Y, y, 1.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(Vector3::VT_Z, z, 1.0);
  }
  explicit Vector3Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vector3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vector3>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vector3> CreateVector3(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double x = 1.0,
    double y = 1.0,
    double z = 1.0) {
  Vector3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

/// A position and orientation for an object or reference frame in 3D space
struct Pose FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PoseBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PoseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ORIENTATION = 6
  };
  /// Point denoting position in 3D space
  const foxglove::Vector3 *position() const {
    return GetPointer<const foxglove::Vector3 *>(VT_POSITION);
  }
  /// Quaternion denoting orientation in 3D space
  const foxglove::Quaternion *orientation() const {
    return GetPointer<const foxglove::Quaternion *>(VT_ORIENTATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_ORIENTATION) &&
           verifier.VerifyTable(orientation()) &&
           verifier.EndTable();
  }
};

struct PoseBuilder {
  typedef Pose Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<foxglove::Vector3> position) {
    fbb_.AddOffset(Pose::VT_POSITION, position);
  }
  void add_orientation(::flatbuffers::Offset<foxglove::Quaternion> orientation) {
    fbb_.AddOffset(Pose::VT_ORIENTATION, orientation);
  }
  explicit PoseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pose> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pose>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pose> CreatePose(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Vector3> position = 0,
    ::flatbuffers::Offset<foxglove::Quaternion> orientation = 0) {
  PoseBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  return builder_.Finish();
}

/// A primitive representing an arrow
struct ArrowPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArrowPrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ArrowPrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_SHAFT_LENGTH = 6,
    VT_SHAFT_DIAMETER = 8,
    VT_HEAD_LENGTH = 10,
    VT_HEAD_DIAMETER = 12,
    VT_COLOR = 14
  };
  /// Position of the arrow's tail and orientation of the arrow. Identity orientation means the arrow points in the +x direction.
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Length of the arrow shaft
  double shaft_length() const {
    return GetField<double>(VT_SHAFT_LENGTH, 0.0);
  }
  /// Diameter of the arrow shaft
  double shaft_diameter() const {
    return GetField<double>(VT_SHAFT_DIAMETER, 0.0);
  }
  /// Length of the arrow head
  double head_length() const {
    return GetField<double>(VT_HEAD_LENGTH, 0.0);
  }
  /// Diameter of the arrow head
  double head_diameter() const {
    return GetField<double>(VT_HEAD_DIAMETER, 0.0);
  }
  /// Color of the arrow
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<double>(verifier, VT_SHAFT_LENGTH, 8) &&
           VerifyField<double>(verifier, VT_SHAFT_DIAMETER, 8) &&
           VerifyField<double>(verifier, VT_HEAD_LENGTH, 8) &&
           VerifyField<double>(verifier, VT_HEAD_DIAMETER, 8) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           verifier.EndTable();
  }
};

struct ArrowPrimitiveBuilder {
  typedef ArrowPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(ArrowPrimitive::VT_POSE, pose);
  }
  void add_shaft_length(double shaft_length) {
    fbb_.AddElement<double>(ArrowPrimitive::VT_SHAFT_LENGTH, shaft_length, 0.0);
  }
  void add_shaft_diameter(double shaft_diameter) {
    fbb_.AddElement<double>(ArrowPrimitive::VT_SHAFT_DIAMETER, shaft_diameter, 0.0);
  }
  void add_head_length(double head_length) {
    fbb_.AddElement<double>(ArrowPrimitive::VT_HEAD_LENGTH, head_length, 0.0);
  }
  void add_head_diameter(double head_diameter) {
    fbb_.AddElement<double>(ArrowPrimitive::VT_HEAD_DIAMETER, head_diameter, 0.0);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(ArrowPrimitive::VT_COLOR, color);
  }
  explicit ArrowPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ArrowPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ArrowPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ArrowPrimitive> CreateArrowPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    double shaft_length = 0.0,
    double shaft_diameter = 0.0,
    double head_length = 0.0,
    double head_diameter = 0.0,
    ::flatbuffers::Offset<foxglove::Color> color = 0) {
  ArrowPrimitiveBuilder builder_(_fbb);
  builder_.add_head_diameter(head_diameter);
  builder_.add_head_length(head_length);
  builder_.add_shaft_diameter(shaft_diameter);
  builder_.add_shaft_length(shaft_length);
  builder_.add_color(color);
  builder_.add_pose(pose);
  return builder_.Finish();
}

/// A primitive representing a cube or rectangular prism
struct CubePrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CubePrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CubePrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_SIZE = 6,
    VT_COLOR = 8
  };
  /// Position of the center of the cube and orientation of the cube
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Size of the cube along each axis
  const foxglove::Vector3 *size() const {
    return GetPointer<const foxglove::Vector3 *>(VT_SIZE);
  }
  /// Color of the cube
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           verifier.EndTable();
  }
};

struct CubePrimitiveBuilder {
  typedef CubePrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(CubePrimitive::VT_POSE, pose);
  }
  void add_size(::flatbuffers::Offset<foxglove::Vector3> size) {
    fbb_.AddOffset(CubePrimitive::VT_SIZE, size);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(CubePrimitive::VT_COLOR, color);
  }
  explicit CubePrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CubePrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CubePrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CubePrimitive> CreateCubePrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> size = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0) {
  CubePrimitiveBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_size(size);
  builder_.add_pose(pose);
  return builder_.Finish();
}

/// A primitive representing a cylinder, elliptic cylinder, or truncated cone
struct CylinderPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CylinderPrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CylinderPrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_SIZE = 6,
    VT_BOTTOM_SCALE = 8,
    VT_TOP_SCALE = 10,
    VT_COLOR = 12
  };
  /// Position of the center of the cylinder and orientation of the cylinder. The flat face(s) are perpendicular to the z-axis.
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Size of the cylinder's bounding box
  const foxglove::Vector3 *size() const {
    return GetPointer<const foxglove::Vector3 *>(VT_SIZE);
  }
  /// 0-1, ratio of the diameter of the cylinder's bottom face (min z) to the bottom of the bounding box
  double bottom_scale() const {
    return GetField<double>(VT_BOTTOM_SCALE, 0.0);
  }
  /// 0-1, ratio of the diameter of the cylinder's top face (max z) to the top of the bounding box
  double top_scale() const {
    return GetField<double>(VT_TOP_SCALE, 0.0);
  }
  /// Color of the cylinder
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyField<double>(verifier, VT_BOTTOM_SCALE, 8) &&
           VerifyField<double>(verifier, VT_TOP_SCALE, 8) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           verifier.EndTable();
  }
};

struct CylinderPrimitiveBuilder {
  typedef CylinderPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(CylinderPrimitive::VT_POSE, pose);
  }
  void add_size(::flatbuffers::Offset<foxglove::Vector3> size) {
    fbb_.AddOffset(CylinderPrimitive::VT_SIZE, size);
  }
  void add_bottom_scale(double bottom_scale) {
    fbb_.AddElement<double>(CylinderPrimitive::VT_BOTTOM_SCALE, bottom_scale, 0.0);
  }
  void add_top_scale(double top_scale) {
    fbb_.AddElement<double>(CylinderPrimitive::VT_TOP_SCALE, top_scale, 0.0);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(CylinderPrimitive::VT_COLOR, color);
  }
  explicit CylinderPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CylinderPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CylinderPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CylinderPrimitive> CreateCylinderPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> size = 0,
    double bottom_scale = 0.0,
    double top_scale = 0.0,
    ::flatbuffers::Offset<foxglove::Color> color = 0) {
  CylinderPrimitiveBuilder builder_(_fbb);
  builder_.add_top_scale(top_scale);
  builder_.add_bottom_scale(bottom_scale);
  builder_.add_color(color);
  builder_.add_size(size);
  builder_.add_pose(pose);
  return builder_.Finish();
}

/// A key with its associated value
struct KeyValuePair FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KeyValuePairBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return KeyValuePairTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  /// Key
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  /// Value
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct KeyValuePairBuilder {
  typedef KeyValuePair Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(KeyValuePair::VT_KEY, key);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(KeyValuePair::VT_VALUE, value);
  }
  explicit KeyValuePairBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KeyValuePair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KeyValuePair>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KeyValuePair> CreateKeyValuePair(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  KeyValuePairBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KeyValuePair> CreateKeyValuePairDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return foxglove::CreateKeyValuePair(
      _fbb,
      key__,
      value__);
}

/// A point representing a position in 3D space
struct Point3 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Point3Builder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Point3TypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  /// x coordinate position
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  /// y coordinate position
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  /// z coordinate position
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           verifier.EndTable();
  }
};

struct Point3Builder {
  typedef Point3 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(Point3::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(Point3::VT_Y, y, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(Point3::VT_Z, z, 0.0);
  }
  explicit Point3Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Point3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Point3>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Point3> CreatePoint3(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0) {
  Point3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

/// A primitive representing a series of points connected by lines
struct LinePrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LinePrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return LinePrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_POSE = 6,
    VT_THICKNESS = 8,
    VT_SCALE_INVARIANT = 10,
    VT_POINTS = 12,
    VT_COLOR = 14,
    VT_COLORS = 16,
    VT_INDICES = 18
  };
  /// Drawing primitive to use for lines
  foxglove::LineType type() const {
    return static_cast<foxglove::LineType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  /// Origin of lines relative to reference frame
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Line thickness
  double thickness() const {
    return GetField<double>(VT_THICKNESS, 0.0);
  }
  /// Indicates whether `thickness` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false)
  bool scale_invariant() const {
    return GetField<uint8_t>(VT_SCALE_INVARIANT, 0) != 0;
  }
  /// Points along the line
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *points() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *>(VT_POINTS);
  }
  /// Solid color to use for the whole line. One of `color` or `colors` must be provided.
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  /// Per-point colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *>(VT_COLORS);
  }
  /// Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
  /// 
  /// If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<double>(verifier, VT_THICKNESS, 8) &&
           VerifyField<uint8_t>(verifier, VT_SCALE_INVARIANT, 1) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.VerifyVectorOfTables(points()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           verifier.VerifyVectorOfTables(colors()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct LinePrimitiveBuilder {
  typedef LinePrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(foxglove::LineType type) {
    fbb_.AddElement<uint8_t>(LinePrimitive::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(LinePrimitive::VT_POSE, pose);
  }
  void add_thickness(double thickness) {
    fbb_.AddElement<double>(LinePrimitive::VT_THICKNESS, thickness, 0.0);
  }
  void add_scale_invariant(bool scale_invariant) {
    fbb_.AddElement<uint8_t>(LinePrimitive::VT_SCALE_INVARIANT, static_cast<uint8_t>(scale_invariant), 0);
  }
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>>> points) {
    fbb_.AddOffset(LinePrimitive::VT_POINTS, points);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(LinePrimitive::VT_COLOR, color);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>>> colors) {
    fbb_.AddOffset(LinePrimitive::VT_COLORS, colors);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(LinePrimitive::VT_INDICES, indices);
  }
  explicit LinePrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LinePrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LinePrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LinePrimitive> CreateLinePrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    foxglove::LineType type = foxglove::LineType_LINE_STRIP,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    double thickness = 0.0,
    bool scale_invariant = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>>> points = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>>> colors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  LinePrimitiveBuilder builder_(_fbb);
  builder_.add_thickness(thickness);
  builder_.add_indices(indices);
  builder_.add_colors(colors);
  builder_.add_color(color);
  builder_.add_points(points);
  builder_.add_pose(pose);
  builder_.add_scale_invariant(scale_invariant);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LinePrimitive> CreateLinePrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    foxglove::LineType type = foxglove::LineType_LINE_STRIP,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    double thickness = 0.0,
    bool scale_invariant = false,
    const std::vector<::flatbuffers::Offset<foxglove::Point3>> *points = nullptr,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    const std::vector<::flatbuffers::Offset<foxglove::Color>> *colors = nullptr,
    const std::vector<uint32_t> *indices = nullptr) {
  auto points__ = points ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Point3>>(*points) : 0;
  auto colors__ = colors ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Color>>(*colors) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return foxglove::CreateLinePrimitive(
      _fbb,
      type,
      pose,
      thickness,
      scale_invariant,
      points__,
      color,
      colors__,
      indices__);
}

/// A primitive representing a 3D model file loaded from an external URL or embedded data
struct ModelPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModelPrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ModelPrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_SCALE = 6,
    VT_COLOR = 8,
    VT_OVERRIDE_COLOR = 10,
    VT_URL = 12,
    VT_MEDIA_TYPE = 14,
    VT_DATA = 16
  };
  /// Origin of model relative to reference frame
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Scale factor to apply to the model along each axis
  const foxglove::Vector3 *scale() const {
    return GetPointer<const foxglove::Vector3 *>(VT_SCALE);
  }
  /// Solid color to use for the whole model if `override_color` is true.
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  /// Whether to use the color specified in `color` instead of any materials embedded in the original model.
  bool override_color() const {
    return GetField<uint8_t>(VT_OVERRIDE_COLOR, 0) != 0;
  }
  /// URL pointing to model file. One of `url` or `data` should be provided.
  const ::flatbuffers::String *url() const {
    return GetPointer<const ::flatbuffers::String *>(VT_URL);
  }
  /// [Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url` is provided.
  const ::flatbuffers::String *media_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEDIA_TYPE);
  }
  /// Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to indicate the type of the data.
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(scale()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyField<uint8_t>(verifier, VT_OVERRIDE_COLOR, 1) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_MEDIA_TYPE) &&
           verifier.VerifyString(media_type()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ModelPrimitiveBuilder {
  typedef ModelPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(ModelPrimitive::VT_POSE, pose);
  }
  void add_scale(::flatbuffers::Offset<foxglove::Vector3> scale) {
    fbb_.AddOffset(ModelPrimitive::VT_SCALE, scale);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(ModelPrimitive::VT_COLOR, color);
  }
  void add_override_color(bool override_color) {
    fbb_.AddElement<uint8_t>(ModelPrimitive::VT_OVERRIDE_COLOR, static_cast<uint8_t>(override_color), 0);
  }
  void add_url(::flatbuffers::Offset<::flatbuffers::String> url) {
    fbb_.AddOffset(ModelPrimitive::VT_URL, url);
  }
  void add_media_type(::flatbuffers::Offset<::flatbuffers::String> media_type) {
    fbb_.AddOffset(ModelPrimitive::VT_MEDIA_TYPE, media_type);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ModelPrimitive::VT_DATA, data);
  }
  explicit ModelPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ModelPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ModelPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ModelPrimitive> CreateModelPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> scale = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    bool override_color = false,
    ::flatbuffers::Offset<::flatbuffers::String> url = 0,
    ::flatbuffers::Offset<::flatbuffers::String> media_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  ModelPrimitiveBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_media_type(media_type);
  builder_.add_url(url);
  builder_.add_color(color);
  builder_.add_scale(scale);
  builder_.add_pose(pose);
  builder_.add_override_color(override_color);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ModelPrimitive> CreateModelPrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> scale = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    bool override_color = false,
    const char *url = nullptr,
    const char *media_type = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto url__ = url ? _fbb.CreateString(url) : 0;
  auto media_type__ = media_type ? _fbb.CreateString(media_type) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return foxglove::CreateModelPrimitive(
      _fbb,
      pose,
      scale,
      color,
      override_color,
      url__,
      media_type__,
      data__);
}

/// A primitive representing a sphere or ellipsoid
struct SpherePrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpherePrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SpherePrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_SIZE = 6,
    VT_COLOR = 8
  };
  /// Position of the center of the sphere and orientation of the sphere
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Size (diameter) of the sphere along each axis
  const foxglove::Vector3 *size() const {
    return GetPointer<const foxglove::Vector3 *>(VT_SIZE);
  }
  /// Color of the sphere
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyTable(size()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           verifier.EndTable();
  }
};

struct SpherePrimitiveBuilder {
  typedef SpherePrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(SpherePrimitive::VT_POSE, pose);
  }
  void add_size(::flatbuffers::Offset<foxglove::Vector3> size) {
    fbb_.AddOffset(SpherePrimitive::VT_SIZE, size);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(SpherePrimitive::VT_COLOR, color);
  }
  explicit SpherePrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SpherePrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SpherePrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SpherePrimitive> CreateSpherePrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> size = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0) {
  SpherePrimitiveBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_size(size);
  builder_.add_pose(pose);
  return builder_.Finish();
}

/// A primitive representing a text label
struct TextPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextPrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TextPrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_BILLBOARD = 6,
    VT_FONT_SIZE = 8,
    VT_SCALE_INVARIANT = 10,
    VT_COLOR = 12,
    VT_TEXT = 14
  };
  /// Position of the center of the text box and orientation of the text. Identity orientation means the text is oriented in the xy-plane and flows from -x to +x.
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Whether the text should respect `pose.orientation` (false) or always face the camera (true)
  bool billboard() const {
    return GetField<uint8_t>(VT_BILLBOARD, 0) != 0;
  }
  /// Font size (height of one line of text)
  double font_size() const {
    return GetField<double>(VT_FONT_SIZE, 0.0);
  }
  /// Indicates whether `font_size` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false)
  bool scale_invariant() const {
    return GetField<uint8_t>(VT_SCALE_INVARIANT, 0) != 0;
  }
  /// Color of the text
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  /// Text
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<uint8_t>(verifier, VT_BILLBOARD, 1) &&
           VerifyField<double>(verifier, VT_FONT_SIZE, 8) &&
           VerifyField<uint8_t>(verifier, VT_SCALE_INVARIANT, 1) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct TextPrimitiveBuilder {
  typedef TextPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(TextPrimitive::VT_POSE, pose);
  }
  void add_billboard(bool billboard) {
    fbb_.AddElement<uint8_t>(TextPrimitive::VT_BILLBOARD, static_cast<uint8_t>(billboard), 0);
  }
  void add_font_size(double font_size) {
    fbb_.AddElement<double>(TextPrimitive::VT_FONT_SIZE, font_size, 0.0);
  }
  void add_scale_invariant(bool scale_invariant) {
    fbb_.AddElement<uint8_t>(TextPrimitive::VT_SCALE_INVARIANT, static_cast<uint8_t>(scale_invariant), 0);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(TextPrimitive::VT_COLOR, color);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(TextPrimitive::VT_TEXT, text);
  }
  explicit TextPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TextPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TextPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TextPrimitive> CreateTextPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    bool billboard = false,
    double font_size = 0.0,
    bool scale_invariant = false,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  TextPrimitiveBuilder builder_(_fbb);
  builder_.add_font_size(font_size);
  builder_.add_text(text);
  builder_.add_color(color);
  builder_.add_pose(pose);
  builder_.add_scale_invariant(scale_invariant);
  builder_.add_billboard(billboard);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TextPrimitive> CreateTextPrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    bool billboard = false,
    double font_size = 0.0,
    bool scale_invariant = false,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return foxglove::CreateTextPrimitive(
      _fbb,
      pose,
      billboard,
      font_size,
      scale_invariant,
      color,
      text__);
}

/// A primitive representing a set of triangles or a surface tiled by triangles
struct TriangleListPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TriangleListPrimitiveBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TriangleListPrimitiveTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_POINTS = 6,
    VT_COLOR = 8,
    VT_COLORS = 10,
    VT_INDICES = 12
  };
  /// Origin of triangles relative to reference frame
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  /// Vertices to use for triangles, interpreted as a list of triples (0-1-2, 3-4-5, ...)
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *points() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *>(VT_POINTS);
  }
  /// Solid color to use for the whole shape. One of `color` or `colors` must be provided.
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  /// Per-vertex colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *>(VT_COLORS);
  }
  /// Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
  /// 
  /// If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.VerifyVectorOfTables(points()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           verifier.VerifyVectorOfTables(colors()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct TriangleListPrimitiveBuilder {
  typedef TriangleListPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(TriangleListPrimitive::VT_POSE, pose);
  }
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>>> points) {
    fbb_.AddOffset(TriangleListPrimitive::VT_POINTS, points);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(TriangleListPrimitive::VT_COLOR, color);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>>> colors) {
    fbb_.AddOffset(TriangleListPrimitive::VT_COLORS, colors);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(TriangleListPrimitive::VT_INDICES, indices);
  }
  explicit TriangleListPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TriangleListPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TriangleListPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TriangleListPrimitive> CreateTriangleListPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>>> points = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>>> colors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  TriangleListPrimitiveBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_colors(colors);
  builder_.add_color(color);
  builder_.add_points(points);
  builder_.add_pose(pose);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TriangleListPrimitive> CreateTriangleListPrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    const std::vector<::flatbuffers::Offset<foxglove::Point3>> *points = nullptr,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    const std::vector<::flatbuffers::Offset<foxglove::Color>> *colors = nullptr,
    const std::vector<uint32_t> *indices = nullptr) {
  auto points__ = points ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Point3>>(*points) : 0;
  auto colors__ = colors ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Color>>(*colors) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return foxglove::CreateTriangleListPrimitive(
      _fbb,
      pose,
      points__,
      color,
      colors__,
      indices__);
}

/// A visual element in a 3D scene. An entity may be composed of multiple primitives which all share the same frame of reference.
struct SceneEntity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneEntityBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SceneEntityTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_ID = 8,
    VT_LIFETIME = 10,
    VT_FRAME_LOCKED = 12,
    VT_METADATA = 14,
    VT_ARROWS = 16,
    VT_CUBES = 18,
    VT_SPHERES = 20,
    VT_CYLINDERS = 22,
    VT_LINES = 24,
    VT_TRIANGLES = 26,
    VT_TEXTS = 28,
    VT_MODELS = 30
  };
  /// Timestamp of the entity
  const foxglove::Time *timestamp() const {
    return GetStruct<const foxglove::Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference
  const ::flatbuffers::String *frame_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Identifier for the entity. A entity will replace any prior entity on the same topic with the same `id`.
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Length of time (relative to `timestamp`) after which the entity should be automatically removed. Zero value indicates the entity should remain visible until it is replaced or deleted.
  const foxglove::Duration *lifetime() const {
    return GetStruct<const foxglove::Duration *>(VT_LIFETIME);
  }
  /// Whether the entity should keep its location in the fixed frame (false) or follow the frame specified in `frame_id` as it moves relative to the fixed frame (true)
  bool frame_locked() const {
    return GetField<uint8_t>(VT_FRAME_LOCKED, 0) != 0;
  }
  /// Additional user-provided metadata associated with the entity. Keys must be unique.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *metadata() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *>(VT_METADATA);
  }
  /// Arrow primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *arrows() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *>(VT_ARROWS);
  }
  /// Cube primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *cubes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *>(VT_CUBES);
  }
  /// Sphere primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *spheres() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *>(VT_SPHERES);
  }
  /// Cylinder primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *cylinders() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *>(VT_CYLINDERS);
  }
  /// Line primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *lines() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *>(VT_LINES);
  }
  /// Triangle list primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *triangles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *>(VT_TRIANGLES);
  }
  /// Text primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *texts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *>(VT_TEXTS);
  }
  /// Model primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *models() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *>(VT_MODELS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<foxglove::Time>(verifier, VT_TIMESTAMP, 4) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<foxglove::Duration>(verifier, VT_LIFETIME, 4) &&
           VerifyField<uint8_t>(verifier, VT_FRAME_LOCKED, 1) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyVector(metadata()) &&
           verifier.VerifyVectorOfTables(metadata()) &&
           VerifyOffset(verifier, VT_ARROWS) &&
           verifier.VerifyVector(arrows()) &&
           verifier.VerifyVectorOfTables(arrows()) &&
           VerifyOffset(verifier, VT_CUBES) &&
           verifier.VerifyVector(cubes()) &&
           verifier.VerifyVectorOfTables(cubes()) &&
           VerifyOffset(verifier, VT_SPHERES) &&
           verifier.VerifyVector(spheres()) &&
           verifier.VerifyVectorOfTables(spheres()) &&
           VerifyOffset(verifier, VT_CYLINDERS) &&
           verifier.VerifyVector(cylinders()) &&
           verifier.VerifyVectorOfTables(cylinders()) &&
           VerifyOffset(verifier, VT_LINES) &&
           verifier.VerifyVector(lines()) &&
           verifier.VerifyVectorOfTables(lines()) &&
           VerifyOffset(verifier, VT_TRIANGLES) &&
           verifier.VerifyVector(triangles()) &&
           verifier.VerifyVectorOfTables(triangles()) &&
           VerifyOffset(verifier, VT_TEXTS) &&
           verifier.VerifyVector(texts()) &&
           verifier.VerifyVectorOfTables(texts()) &&
           VerifyOffset(verifier, VT_MODELS) &&
           verifier.VerifyVector(models()) &&
           verifier.VerifyVectorOfTables(models()) &&
           verifier.EndTable();
  }
};

struct SceneEntityBuilder {
  typedef SceneEntity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(const foxglove::Time *timestamp) {
    fbb_.AddStruct(SceneEntity::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(::flatbuffers::Offset<::flatbuffers::String> frame_id) {
    fbb_.AddOffset(SceneEntity::VT_FRAME_ID, frame_id);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SceneEntity::VT_ID, id);
  }
  void add_lifetime(const foxglove::Duration *lifetime) {
    fbb_.AddStruct(SceneEntity::VT_LIFETIME, lifetime);
  }
  void add_frame_locked(bool frame_locked) {
    fbb_.AddElement<uint8_t>(SceneEntity::VT_FRAME_LOCKED, static_cast<uint8_t>(frame_locked), 0);
  }
  void add_metadata(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>>> metadata) {
    fbb_.AddOffset(SceneEntity::VT_METADATA, metadata);
  }
  void add_arrows(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>>> arrows) {
    fbb_.AddOffset(SceneEntity::VT_ARROWS, arrows);
  }
  void add_cubes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>>> cubes) {
    fbb_.AddOffset(SceneEntity::VT_CUBES, cubes);
  }
  void add_spheres(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>>> spheres) {
    fbb_.AddOffset(SceneEntity::VT_SPHERES, spheres);
  }
  void add_cylinders(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>>> cylinders) {
    fbb_.AddOffset(SceneEntity::VT_CYLINDERS, cylinders);
  }
  void add_lines(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>>> lines) {
    fbb_.AddOffset(SceneEntity::VT_LINES, lines);
  }
  void add_triangles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>>> triangles) {
    fbb_.AddOffset(SceneEntity::VT_TRIANGLES, triangles);
  }
  void add_texts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>>> texts) {
    fbb_.AddOffset(SceneEntity::VT_TEXTS, texts);
  }
  void add_models(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>>> models) {
    fbb_.AddOffset(SceneEntity::VT_MODELS, models);
  }
  explicit SceneEntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneEntity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneEntity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneEntity> CreateSceneEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> frame_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    const foxglove::Duration *lifetime = nullptr,
    bool frame_locked = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>>> metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>>> arrows = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>>> cubes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>>> spheres = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>>> cylinders = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>>> lines = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>>> triangles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>>> texts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>>> models = 0) {
  SceneEntityBuilder builder_(_fbb);
  builder_.add_models(models);
  builder_.add_texts(texts);
  builder_.add_triangles(triangles);
  builder_.add_lines(lines);
  builder_.add_cylinders(cylinders);
  builder_.add_spheres(spheres);
  builder_.add_cubes(cubes);
  builder_.add_arrows(arrows);
  builder_.add_metadata(metadata);
  builder_.add_lifetime(lifetime);
  builder_.add_id(id);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  builder_.add_frame_locked(frame_locked);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneEntity> CreateSceneEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    const char *frame_id = nullptr,
    const char *id = nullptr,
    const foxglove::Duration *lifetime = nullptr,
    bool frame_locked = false,
    const std::vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *metadata = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *arrows = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *cubes = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *spheres = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *cylinders = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *lines = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *triangles = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *texts = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *models = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto metadata__ = metadata ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::KeyValuePair>>(*metadata) : 0;
  auto arrows__ = arrows ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::ArrowPrimitive>>(*arrows) : 0;
  auto cubes__ = cubes ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::CubePrimitive>>(*cubes) : 0;
  auto spheres__ = spheres ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::SpherePrimitive>>(*spheres) : 0;
  auto cylinders__ = cylinders ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::CylinderPrimitive>>(*cylinders) : 0;
  auto lines__ = lines ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::LinePrimitive>>(*lines) : 0;
  auto triangles__ = triangles ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>>(*triangles) : 0;
  auto texts__ = texts ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::TextPrimitive>>(*texts) : 0;
  auto models__ = models ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::ModelPrimitive>>(*models) : 0;
  return foxglove::CreateSceneEntity(
      _fbb,
      timestamp,
      frame_id__,
      id__,
      lifetime,
      frame_locked,
      metadata__,
      arrows__,
      cubes__,
      spheres__,
      cylinders__,
      lines__,
      triangles__,
      texts__,
      models__);
}

inline const ::flatbuffers::TypeTable *LineTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_UCHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::LineTypeTypeTable
  };
  static const char * const names[] = {
    "LINE_STRIP",
    "LINE_LOOP",
    "LINE_LIST"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ColorTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "r",
    "g",
    "b",
    "a"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *QuaternionTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "x",
    "y",
    "z",
    "w"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *Vector3TypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "x",
    "y",
    "z"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *PoseTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::Vector3TypeTable,
    foxglove::QuaternionTypeTable
  };
  static const char * const names[] = {
    "position",
    "orientation"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ArrowPrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "shaft_length",
    "shaft_diameter",
    "head_length",
    "head_diameter",
    "color"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CubePrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::Vector3TypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "size",
    "color"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CylinderPrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::Vector3TypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "size",
    "bottom_scale",
    "top_scale",
    "color"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DurationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const int64_t values[] = { 0, 4, 8 };
  static const char * const names[] = {
    "sec",
    "nsec"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 2, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *KeyValuePairTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "key",
    "value"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *Point3TypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "x",
    "y",
    "z"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *LinePrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 1, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 },
    { ::flatbuffers::ET_SEQUENCE, 1, 3 },
    { ::flatbuffers::ET_UINT, 1, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::LineTypeTypeTable,
    foxglove::PoseTypeTable,
    foxglove::Point3TypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "type",
    "pose",
    "thickness",
    "scale_invariant",
    "points",
    "color",
    "colors",
    "indices"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 8, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ModelPrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::Vector3TypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "scale",
    "color",
    "override_color",
    "url",
    "media_type",
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SpherePrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::Vector3TypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "size",
    "color"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TextPrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "billboard",
    "font_size",
    "scale_invariant",
    "color",
    "text"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TimeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 }
  };
  static const int64_t values[] = { 0, 4, 8 };
  static const char * const names[] = {
    "sec",
    "nsec"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 2, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *TriangleListPrimitiveTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 1, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 1, 2 },
    { ::flatbuffers::ET_UINT, 1, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::PoseTypeTable,
    foxglove::Point3TypeTable,
    foxglove::ColorTypeTable
  };
  static const char * const names[] = {
    "pose",
    "points",
    "color",
    "colors",
    "indices"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SceneEntityTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 1, 2 },
    { ::flatbuffers::ET_SEQUENCE, 1, 3 },
    { ::flatbuffers::ET_SEQUENCE, 1, 4 },
    { ::flatbuffers::ET_SEQUENCE, 1, 5 },
    { ::flatbuffers::ET_SEQUENCE, 1, 6 },
    { ::flatbuffers::ET_SEQUENCE, 1, 7 },
    { ::flatbuffers::ET_SEQUENCE, 1, 8 },
    { ::flatbuffers::ET_SEQUENCE, 1, 9 },
    { ::flatbuffers::ET_SEQUENCE, 1, 10 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    foxglove::TimeTypeTable,
    foxglove::DurationTypeTable,
    foxglove::KeyValuePairTypeTable,
    foxglove::ArrowPrimitiveTypeTable,
    foxglove::CubePrimitiveTypeTable,
    foxglove::SpherePrimitiveTypeTable,
    foxglove::CylinderPrimitiveTypeTable,
    foxglove::LinePrimitiveTypeTable,
    foxglove::TriangleListPrimitiveTypeTable,
    foxglove::TextPrimitiveTypeTable,
    foxglove::ModelPrimitiveTypeTable
  };
  static const char * const names[] = {
    "timestamp",
    "frame_id",
    "id",
    "lifetime",
    "frame_locked",
    "metadata",
    "arrows",
    "cubes",
    "spheres",
    "cylinders",
    "lines",
    "triangles",
    "texts",
    "models"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 14, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const foxglove::SceneEntity *GetSceneEntity(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::SceneEntity>(buf);
}

inline const foxglove::SceneEntity *GetSizePrefixedSceneEntity(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::SceneEntity>(buf);
}

inline bool VerifySceneEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::SceneEntity>(nullptr);
}

inline bool VerifySizePrefixedSceneEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::SceneEntity>(nullptr);
}

inline void FinishSceneEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::SceneEntity> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::SceneEntity> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_SCENEENTITY_FOXGLOVE_H_
