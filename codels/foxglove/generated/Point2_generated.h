// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT2_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_POINT2_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

namespace foxglove {

struct Point2;
struct Point2Builder;

inline const ::flatbuffers::TypeTable *Point2TypeTable();

/// A point representing a position in 2D space
struct Point2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Point2Builder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Point2TypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  /// x coordinate position
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  /// y coordinate position
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           verifier.EndTable();
  }
};

struct Point2Builder {
  typedef Point2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(Point2::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(Point2::VT_Y, y, 0.0);
  }
  explicit Point2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Point2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Point2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Point2> CreatePoint2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double x = 0.0,
    double y = 0.0) {
  Point2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Point2TypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "x",
    "y"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const foxglove::Point2 *GetPoint2(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::Point2>(buf);
}

inline const foxglove::Point2 *GetSizePrefixedPoint2(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::Point2>(buf);
}

inline bool VerifyPoint2Buffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::Point2>(nullptr);
}

inline bool VerifySizePrefixedPoint2Buffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::Point2>(nullptr);
}

inline void FinishPoint2Buffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::Point2> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPoint2Buffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::Point2> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_POINT2_FOXGLOVE_H_
