// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FRAMETRANSFORMS_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_FRAMETRANSFORMS_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

#include "FrameTransform_generated.h"
#include "Quaternion_generated.h"
#include "Time_generated.h"
#include "Vector3_generated.h"

namespace foxglove {

struct FrameTransforms;

/// An array of FrameTransform messages
struct FrameTransforms FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSFORMS = 4
  };
  /// Array of transforms
  const flatbuffers::Vector<flatbuffers::Offset<FrameTransform>> *transforms() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FrameTransform>> *>(VT_TRANSFORMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRANSFORMS) &&
           verifier.VerifyVector(transforms()) &&
           verifier.VerifyVectorOfTables(transforms()) &&
           verifier.EndTable();
  }
};

struct FrameTransformsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_transforms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FrameTransform>>> transforms) {
    fbb_.AddOffset(FrameTransforms::VT_TRANSFORMS, transforms);
  }
  explicit FrameTransformsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FrameTransformsBuilder &operator=(const FrameTransformsBuilder &);
  flatbuffers::Offset<FrameTransforms> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FrameTransforms>(end);
    return o;
  }
};

inline flatbuffers::Offset<FrameTransforms> CreateFrameTransforms(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FrameTransform>>> transforms = 0) {
  FrameTransformsBuilder builder_(_fbb);
  builder_.add_transforms(transforms);
  return builder_.Finish();
}

inline flatbuffers::Offset<FrameTransforms> CreateFrameTransformsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<FrameTransform>> *transforms = nullptr) {
  auto transforms__ = transforms ? _fbb.CreateVector<flatbuffers::Offset<FrameTransform>>(*transforms) : 0;
  return foxglove::CreateFrameTransforms(
      _fbb,
      transforms__);
}

inline const foxglove::FrameTransforms *GetFrameTransforms(const void *buf) {
  return flatbuffers::GetRoot<foxglove::FrameTransforms>(buf);
}

inline const foxglove::FrameTransforms *GetSizePrefixedFrameTransforms(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<foxglove::FrameTransforms>(buf);
}

inline bool VerifyFrameTransformsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::FrameTransforms>(nullptr);
}

inline bool VerifySizePrefixedFrameTransformsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::FrameTransforms>(nullptr);
}

inline void FinishFrameTransformsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::FrameTransforms> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFrameTransformsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<foxglove::FrameTransforms> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_FRAMETRANSFORMS_FOXGLOVE_H_
